{"version":3,"sources":["Chart.js","Util.js","App.js","reportWebVitals.js","index.js"],"names":["CustomTooltip","active","payload","label","length","time","grade","value","type","className","Chart","data","title","fixedScore","score","toFixed","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","offset","position","YAxis","angle","Tooltip","content","Line","stroke","activeDot","r","MOVE","BOMB","MISSES","HEADSHOT","BODY","weights","gradding","getAvg","arr","reduce","a","b","speedData","accuracyData","avgs","forEach","o","getGrade","push","includes","isSpeed","this","_speedSkillScore","moveAvgScore","bombAvgScore","getSpeedScore","_accuracySkillScore","missesAvgScore","headshotAvgScore","bodyAvgScore","getAccuracyScore","_speedData","_accuracyData","getProcessedData","getSkillScores","speedSkillScore","accuracySkillScore","App","Util","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"42CAUMA,EAAgB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACxC,GAAIF,GAAUC,GAAWA,EAAQE,OAAQ,CACvC,IAAMC,EAAOF,EACPG,EAAQJ,EAAQ,GAAGK,MACjBC,EAASN,EAAQ,GAAGA,QAApBM,KACR,OACE,sBAAKC,UAAU,iBAAf,UACE,4BAAID,IACJ,uCAAQH,EAAR,YAAgBC,EAAhB,UAKN,OAAO,MA8CMI,EA3CD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MACfC,EADkC,EAAZC,MACHC,QAAQ,GACjC,OACE,mCACE,sBAAKN,UAAU,kBAAf,UACE,6BAAKG,IACL,+CAAkBC,KAClB,eAACG,EAAA,EAAD,CACEC,MAAO,IACPC,OAAQ,IACRP,KAAMA,EACNQ,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IARZ,UAWE,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CACEC,QAAQ,OACRxB,MAAO,CACLI,MAAO,YACPqB,OAAQ,EACRC,SAAU,YAGd,cAACC,EAAA,EAAD,CACE3B,MAAO,CAAEyB,OAAQ,GAAIrB,MAAO,QAASwB,MAAO,EAAGF,SAAU,SAE3D,cAACG,EAAA,EAAD,CAASC,QAAS,cAAC,EAAD,MAClB,cAACC,EAAA,EAAD,CACE1B,KAAK,WACLmB,QAAQ,QACRQ,OAAO,UACPC,UAAW,CAAEC,EAAG,c,iBC3DtBC,EAAO,OACPC,EAAO,OACPC,EAAS,SACTC,EAAW,WACXC,EAAO,OAEPC,GAAO,mBACVL,EAAO,KADG,cAEVC,EAAO,KAFG,cAGVC,EAAS,KAHC,cAIVC,EAAW,IAJD,cAKVC,EAAO,KALG,GAQPE,GAAQ,mBACXN,GAAO,SAAC/B,GACP,OAAIA,EAAQ,IAAY,IACpBA,GAAS,KAAOA,EAAQ,IAAY,GACjC,KAJG,cAMXgC,GAAO,SAAChC,GAAD,OAAYA,EAAQ,IAAM,KANtB,cAOXiC,GAAS,SAACjC,GACT,OAAIA,EAAQ,GAAW,IACnBA,GAAS,IAAMA,EAAQ,IAAY,GAChC,KAVG,cAYXkC,GAAW,kBAAM,OAZN,cAaXC,GAAO,kBAAM,MAbF,GAwBRG,EAAS,SAACC,GAEd,OADYA,EAAIC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAC3BH,EAAI1C,QA4DJ,UAzCf,WAAiB,IAAD,SACR8C,EAAY,GACZC,EAAe,GAEfC,GAAI,mBACPd,EAAO,IADA,cAEPC,EAAO,IAFA,cAGPC,EAAS,IAHF,cAIPC,EAAW,IAJJ,cAKPC,EAAO,IALA,GAkCV,OA1BA/B,EAAK0C,SAAQ,SAACC,GACZ,IAAQ9C,EAAgB8C,EAAhB9C,KAAMD,EAAU+C,EAAV/C,MACd+C,EAAC,MA3CY,SAAC9C,EAAMD,GACtB,OAAOqC,EAASpC,GAAMD,GA0CPgD,CAAS/C,EAAMD,GAE5B6C,EAAK5C,GAAMgD,KAAKjD,IAzCJ,SAACC,GACf,MAAO,CAAC8B,EAAMC,GAAMkB,SAASjD,GAyC3BkD,CAAQlD,GAA4B2C,EAAaK,KAAKF,GAAtCJ,EAAUM,KAAKF,MAGjCK,KAAKC,iBApCe,SAACR,GACrB,IAAMS,EAAehB,EAAOO,EAAKd,IAC3BwB,EAAejB,EAAOO,EAAKb,IACjC,OAAOsB,EAAelB,EAAQL,GAAQwB,EAAenB,EAAQJ,GAiCrCwB,CAAcX,GACtCO,KAAKK,oBAhCkB,SAACZ,GACxB,IAAMa,EAAiBpB,EAAOO,EAAI,QAC5Bc,EAAmBrB,EAAOO,EAAI,UAC9Be,EAAetB,EAAOO,EAAI,MAChC,OACEa,EAAiBtB,EAAO,OACxBuB,EAAmBvB,EAAO,SAC1BwB,EAAexB,EAAO,KAyBGyB,CAAiBhB,GAE5CO,KAAKU,WAAanB,EAClBS,KAAKW,cAAgBnB,EAcd,CAAEoB,iBAZgB,iBAAO,CAC9BrB,UAAW,EAAKmB,WAChBlB,aAAc,EAAKmB,gBAUME,eAPJ,WACrB,MAAO,CACLC,gBAAiB,EAAKb,iBACtBc,mBAAoB,EAAKV,wB,OC5EhBW,MAbf,WACE,MAAoCC,EAAKL,mBAAjCrB,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,aACnB,EAAgDyB,EAAKJ,iBAA7CC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,mBACzB,OACE,sBAAKjE,UAAU,MAAf,UACE,6CACA,mBAAGoE,KAPP,yEAOI,wBACA,cAAC,EAAD,CAAOlE,KAAMuC,EAAWtC,MAAM,QAAQE,MAAO2D,IAC7C,cAAC,EAAD,CAAO9D,KAAMwC,EAAcvC,MAAM,WAAWE,MAAO4D,QCF1CI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4cb81ccb.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\n\nconst CustomTooltip = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    const time = label;\n    const grade = payload[0].value;\n    const { type } = payload[0].payload;\n    return (\n      <div className=\"custom-tooltip\">\n        <p>{type}</p>\n        <p>{`(${time},${grade})`}</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst Chart = ({ data, title, score }) => {\n  const fixedScore = score.toFixed(2);\n  return (\n    <>\n      <div className=\"Chart-container\">\n        <h2>{title}</h2>\n        <h4>Skill Score: {fixedScore}</h4>\n        <LineChart\n          width={800}\n          height={500}\n          data={data}\n          margin={{\n            top: 30,\n            right: 30,\n            left: 20,\n            bottom: 30,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"time\"\n            label={{\n              value: \"Time {Ms}\",\n              offset: 0,\n              position: \"bottom\",\n            }}\n          />\n          <YAxis\n            label={{ offset: 15, value: \"Grade\", angle: 0, position: \"top\" }}\n          />\n          <Tooltip content={<CustomTooltip />} />\n          <Line\n            type=\"monotone\"\n            dataKey=\"grade\"\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </div>\n    </>\n  );\n};\n\nexport default Chart;\n","import data from \"./input.json\";\n\nconst MOVE = \"Move\";\nconst BOMB = \"Bomb\";\nconst MISSES = \"Misses\";\nconst HEADSHOT = \"Headshot\";\nconst BODY = \"Body\";\n\nconst weights = {\n  [MOVE]: 0.85,\n  [BOMB]: 0.15,\n  [MISSES]: 0.15,\n  [HEADSHOT]: 0.2,\n  [BODY]: 0.65,\n};\n\nconst gradding = {\n  [MOVE]: (value) => {\n    if (value < 105) return 100;\n    if (value >= 105 && value < 250) return 70;\n    return 0;\n  },\n  [BOMB]: (value) => (value ? 100 : 0), // !? UNCLEAR: 100 if <40000 mSec. Else â€“ 0.\n  [MISSES]: (value) => {\n    if (value < 60) return 100;\n    if (value >= 60 && value < 400) return 70;\n    return 0;\n  },\n  [HEADSHOT]: () => 100,\n  [BODY]: () => 80,\n};\n\nconst getGrade = (type, value) => {\n  return gradding[type](value);\n};\n\nconst isSpeed = (type) => {\n  return [MOVE, BOMB].includes(type);\n};\n\nconst getAvg = (arr) => {\n  const sum = arr.reduce((a, b) => a + b, 0);\n  return sum / arr.length;\n};\n\nconst getSpeedScore = (avgs) => {\n  const moveAvgScore = getAvg(avgs[MOVE]);\n  const bombAvgScore = getAvg(avgs[BOMB]);\n  return moveAvgScore * weights[MOVE] + bombAvgScore * weights[BOMB];\n};\nconst getAccuracyScore = (avgs) => {\n  const missesAvgScore = getAvg(avgs[MISSES]);\n  const headshotAvgScore = getAvg(avgs[HEADSHOT]);\n  const bodyAvgScore = getAvg(avgs[BODY]);\n  return (\n    missesAvgScore * weights[MISSES] +\n    headshotAvgScore * weights[HEADSHOT] +\n    bodyAvgScore * weights[BODY]\n  );\n};\n\nfunction Util() {\n  const speedData = [];\n  const accuracyData = [];\n\n  const avgs = {\n    [MOVE]: [],\n    [BOMB]: [],\n    [MISSES]: [],\n    [HEADSHOT]: [],\n    [BODY]: [],\n  };\n\n  data.forEach((o) => {\n    const { type, value } = o;\n    o[\"grade\"] = getGrade(type, value);\n    debugger;\n    avgs[type].push(value);\n    isSpeed(type) ? speedData.push(o) : accuracyData.push(o);\n  });\n\n  this._speedSkillScore = getSpeedScore(avgs);\n  this._accuracySkillScore = getAccuracyScore(avgs);\n\n  this._speedData = speedData;\n  this._accuracyData = accuracyData;\n\n  const getProcessedData = () => ({\n    speedData: this._speedData,\n    accuracyData: this._accuracyData,\n  });\n\n  const getSkillScores = () => {\n    return {\n      speedSkillScore: this._speedSkillScore,\n      accuracySkillScore: this._accuracySkillScore,\n    };\n  };\n\n  return { getProcessedData, getSkillScores };\n}\n\nexport default new Util();\n","import Chart from \"./Chart\";\nimport Util from \"./Util\";\nimport \"./App.css\";\n\nconst INPUT_LINK =\n  \"https://raw.githubusercontent.com/barhoring/Edge/master/src/input.json\";\nfunction App() {\n  const { speedData, accuracyData } = Util.getProcessedData();\n  const { speedSkillScore, accuracySkillScore } = Util.getSkillScores();\n  return (\n    <div className=\"App\">\n      <h1>Edge Graphs</h1>\n      <a href={INPUT_LINK}>input data</a>\n      <Chart data={speedData} title=\"Speed\" score={speedSkillScore} />\n      <Chart data={accuracyData} title=\"Accuracy\" score={accuracySkillScore} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}